AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  LambdaWriteToDynamoDB:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: LambdaWriteToDynamoDB
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: LambdaToDyno/
      Description: A function that writes to a DynamoDB table
      MemorySize: 128
      Timeout: 30
      Policies:
      # Read more about SAM policy templates here
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable
      Events:
        Trigger:
          Type: SQS
          Properties:
            Queue: !GetAtt sqsToLambdaToDyno.Arn
            BatchSize: 10

  LambdaToEventBridge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaToEventBridge
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: LambdaToEvent/
      Description: A function that writes to a DynamoDB table
      MemorySize: 128
      Timeout: 30
      Policies: 
        - AWSLambda_FullAccess
        - AWSLambdaBasicExecutionRole
  
  LambdaLog: 
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain 
    Properties:
      LogGroupName: LogLambdaWriteToDynamoDB
      RetentionInDays: 70
  
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: MyDynamoDBTable
      KeySchema:
        - AttributeName: accountId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: accountId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  eventBus:
    Type: AWS::Events::EventBus
    Properties: 
       Name: "eventBus"

  eventRuleOne: 
    Type: AWS::Events::Rule
    Properties:
      EventBusName: eventBus 
      EventPattern: 
        {
          "detail": {"accountId":[{"exists": true}]}
        }
      Targets: 
        - Arn: !GetAtt sqsToLambdaToDyno.Arn 
          Id: SQSqueue 

  sqsToLambdaToDyno:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sqsToLambdaToDynoo
  
  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref sqsToLambdaToDyno
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: 
              Service: events.amazonaws.com
            Resource: !GetAtt sqsToLambdaToDyno.Arn
            Action:
              - "SQS:SendMessage"
              - "SQS:ReceiveMessage"
              - "SQS:DeleteMessage"
              - "SQS:GetQueueAttributes"
            