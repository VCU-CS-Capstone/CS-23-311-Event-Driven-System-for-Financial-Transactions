AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  LambdaWriteToDynamoDBV2:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: LambdaWriteToDynamoDBV2
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: LambdaToDyno/
      Description: A function that writes to a DynamoDB table
      MemorySize: 128
      Timeout: 30
      Policies:
        # Read more about SAM policy templates here
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - AWSLambdaExecute
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
      Events:
        Trigger:
          Type: SQS
          Properties:
            Queue: !GetAtt sqsToLambdaToDyno.Arn
            BatchSize: 10

  LambdaToEventBridge:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaToEventBridge
      Handler: app.lambda_handler
      Runtime: python3.7
      CodeUri: LambdaToEvent/
      Description: A function that writes to a DynamoDB table
      MemorySize: 128
      Timeout: 30
      Policies:
        - AWSLambda_FullAccess
        - AWSLambdaBasicExecutionRole
        - AmazonEventBridgeFullAccess
        - Statement:
            - Sid: EvCustomPolicy
              Effect: Allow
              Action: events:PutEvents
              Resource: '*'
        # - EventBridgePutEventsPolicy:
        #     Effect: Allow
        #     Action: events:PutEvents
        #     Resource: !GetAtt eventBus.ARN

      Events:
        Trigger:
          Type: SQS
          Properties:
            Queue: !GetAtt sqsToLambdaToEb.Arn
            BatchSize: 10

  # EventBridgeLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt LambdaToEventBridge.Arn
  #     Action: events:PutEvents
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt sqsToLambdaToEb.Arn

  LambdaLog:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: LogLambdaWriteToDynamoDB
      RetentionInDays: 7

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: DynamoDBTable
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  eventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: 'eventBus'

  eventRuleOne:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: eventBus
      EventPattern: { 'detail': { 'id': [{ 'exists': true }] } }
      Targets:
        - Arn: !GetAtt sqsToLambdaToDyno.Arn
          Id: SQSqueue

  sqsToLambdaToDyno:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sqsToLambdaToDynoo

  sqsToLambdaToEb:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: sqsToLambdaToEb

  SQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref sqsToLambdaToDyno
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: !GetAtt sqsToLambdaToDyno.Arn
            Action:
              - 'SQS:SendMessage'
              - 'SQS:ReceiveMessage'
              - 'SQS:DeleteMessage'
              - 'SQS:GetQueueAttributes'
